{"version":3,"sources":["Firestore.js","Todo.js","Home.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Todo","_useState","useState","content","isCompleted","_useState2","Object","slicedToArray","todos","setTodos","_useState3","_useState4","focused","setFocused","dbRef","collection","concat","window","location","pathname","updateDataBase","newTodos","map","todo","doc","set","handleKeyDown","e","i","key","toConsumableArray","splice","setTimeout","document","forms","elements","focus","createTodoAtIndex","preventDefault","delete","console","log","length","slice","undefined","removeTodoAtIndex","useEffect","get","then","t","docs","data","push","catch","error","react_default","a","createElement","className","onClick","index","temporaryTodos","toggleTodoCompleteAtIndex","type","value","onKeyDown","onChange","target","updateTodoAtIndex","onFocus","onBlur","Home","style","display","fontWeight","width","fontSize","autoFocus","App","src_Todo","src_Home","Boolean","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.236da00b.chunk.js","sourcesContent":["import firebase from 'firebase';\nconst config = {\n  apiKey: \"AIzaSyDcMV_QWWhI4sR2CaCA2jLku7mvYSEkQz0\",\n  authDomain: \"dontlist-90ca6.firebaseapp.com\",\n  databaseURL: \"https://dontlist-90ca6.firebaseio.com\",\n  projectId: \"dontlist-90ca6\",\n  storageBucket: \"dontlist-90ca6.appspot.com\",\n  messagingSenderId: \"1085303813641\",\n  appId: \"1:1085303813641:web:25965e12c5f4c700\"\n};\nfirebase.initializeApp(config);\nexport default firebase;\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport firestore from './Firestore';\nimport * as firebase from \"firebase\";\n\nfunction Todo() {\n  const [todos, setTodos] = useState([\n    {\n      content: '',\n      isCompleted: false,\n    },\n  ]);\n  const [focused, setFocused] = useState(\"\");\n  const db = firebase.firestore();\n  const dbRef = db.collection(`${window.location.pathname}`);\n\n  useEffect(()=> {\n\n    dbRef.get().then(function(collection) {\n      let t = collection.docs.map(doc => doc.data());\n      t.push({\n        content: '',\n        isCompleted: false,\n      });\n      // console.log(t);\n      setTodos(t);\n    }).catch(function(error) {\n      console.log(\"Error getting collection:\", error);\n    });\n  },[]);\n\n  function updateDataBase(newTodos) {\n    newTodos.map((todo) => {\n      if(todo.content === \"\"){\n        return;\n      }\n      return dbRef.doc(todo.content).set(\n        {\n          content: todo.content,\n          isCompleted: todo.isCompleted\n        }\n      );\n    });\n  }\n\n  function updateDoc(doc, value) {\n    console.log(doc);\n    console.log(value);\n    if(doc !== \"\" && doc !== value && value !== \"\"){\n      dbRef.doc(value).set({\n        content: value,\n        isCompleted: false\n      }).then(() => dbRef.doc(doc).delete())\n    }\n  }\n\n  function handleKeyDown(e, i) {\n    if (e.key === 'Enter') {\n      createTodoAtIndex(e, i);\n    }\n    if (e.key === 'Backspace' && todos[i].content === '') {\n      e.preventDefault();\n      return removeTodoAtIndex(i);\n    }\n  }\n\n  function createTodoAtIndex(e, i) {\n    const newTodos = [...todos];\n    newTodos.splice(i + 1, 0, {\n      content: '',\n      isCompleted: false,\n    });\n    setTodos(newTodos);\n    setTimeout(() => {\n      document.forms[0].elements[i + 1].focus();\n    }, 0);\n    updateDataBase(newTodos);\n  }\n\n  function updateTodoAtIndex(e, i) {\n    const newTodos = [...todos];\n    newTodos[i].content = e.target.value;\n    setTodos(newTodos);\n  }\n\n  function removeTodoAtIndex(i) {\n    // dbRef.get().then(function(querySnapshot) {\n    //   querySnapshot.forEach(function(doc) {\n    //     doc.ref.delete().then(\n    //       () => updateDataBase(todos)\n    //     )\n    //   });\n    // });\n    if(focused !== \"\"){\n      dbRef.doc(focused).delete();\n    }\n    console.log(focused);\n    if (i === 0 && todos.length === 1) return;\n    setTodos(todos => todos.slice(0, i).concat(todos.slice(i + 1, todos.length)));\n    setTimeout(() => {\n      if(document.forms[0].elements[i - 1] !== undefined){\n        document.forms[0].elements[i - 1].focus();\n      }\n    }, 0);\n  }\n\n  function toggleTodoCompleteAtIndex(index) {\n    const temporaryTodos = [...todos];\n    temporaryTodos[index].isCompleted = !temporaryTodos[index].isCompleted;\n    setTodos(temporaryTodos);\n    updateDataBase(temporaryTodos);\n  }\n\n  return (\n    <div className=\"app\">\n      <h1 className={'text-white'}>{window.location.pathname}</h1>\n      <form className=\"todo-list\">\n        <ul>\n          {todos.map((todo, i) => (\n            <div className={`todo ${todo.isCompleted && 'todo-is-completed'}`}>\n              <div className={'checkbox'} onClick={() => toggleTodoCompleteAtIndex(i)}>\n                {todo.isCompleted && (\n                  <span>&#x2714;</span>\n                )}\n              </div>\n              <input\n                type=\"text\"\n                value={todo.content}\n                onKeyDown={e => handleKeyDown(e, i)}\n                onChange={e => updateTodoAtIndex(e, i)}\n                onFocus={() => setFocused(todo.content)}\n                onBlur={() => updateDoc(focused, todo.content)}\n              />\n            </div>\n          ))}\n        </ul>\n      </form>\n\n    </div>\n  );\n}\n\nexport default Todo;\n","import React from 'react';\nfunction Home() {\n\n  function handleKeyDown(e) {\n    if (e.key === 'Enter') {\n      window.location.pathname = e.target.value;\n    }\n  }\n\n  return(\n    <div className={'containerCenter'}>\n      <div style={{display: 'flex'}}>\n        <h1 className={'text-white'} style={{fontWeight: 400}}>dontlist.com/</h1>\n        <input type=\"text\" style={{width: 200, fontSize: 30, fontWeight: 600}} autoFocus={true}\n               onKeyDown={e => handleKeyDown(e)}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default Home;\n","import React, { useState, useEffect } from 'react';\nimport Todo from \"./Todo\";\nimport Home from './Home';\n\n\nfunction App() {\n  if(window.location.pathname !== \"/\"){\n    return <Todo/>\n  }\n  return <Home/>\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}